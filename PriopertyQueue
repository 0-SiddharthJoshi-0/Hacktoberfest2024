import java.util.ArrayList;

public class Priority_Queue {
	
	private ArrayList<Integer> heap;
	//we need our heap do not access anyone Head data member 
	
	public Priority_Queue() {
		heap = new ArrayList<>();	
		
	}
	boolean isEmpty() {
		return heap.size()==0;
	}
	
	int size() {
		return heap.size();
		
	}
	
	int getmin() throws Exception {
		if(isEmpty()) {
			//Throw an Exception
			throw new PriporityQueueException();
			
		}
		return heap.get(0);
		
	}
	void insert(int element) {
		heap.add(element);//adding the element last element to first 
		//here we up heapify start
		int childIndex = heap.size()-1;
		int parentIndex =(childIndex-1)/2;
		
		while(childIndex >0) {
		if(heap.get(childIndex)<heap.get(parentIndex)) {
		int temp =heap.get(childIndex);
		heap.set(childIndex, heap.get(parentIndex));
		heap.set(parentIndex, temp);
		childIndex =parentIndex;
		parentIndex =(childIndex-1)/2;
		
	
		}else{
			return;
		}
		
		
	}

}
	
	int removeMin() throws PriporityQueueException {
		if(isEmpty()) {

		}
		int temp=heap.get(0);
		heap.set(0,heap.size()-1);
		heap.set(0,heap.get(heap.size()-1));
		heap.remove(heap.size()-1);
		int index=0;
		
		int minIndex=0;
		
		int leftChildIndex =1;
		int rightChildIndex=2;
		while(leftChildIndex<heap.size()) {
			
		
		if(heap.get(leftChildIndex)<heap.get(minIndex)) {
			
			minIndex =leftChildIndex;
			
		}
        if(rightChildIndex<heap.size() && heap.get(rightChildIndex)<heap.get(minIndex)) {
			
			minIndex =rightChildIndex;
			
		}
		if(minIndex==index) {
			break;
		}
		else {
        int temp1 = heap.get(index);
        heap.set(index,heap.get(minIndex));
        heap.set(rightChildIndex, temp1);
        index =minIndex;
        leftChildIndex=2*index+1;
        rightChildIndex=2*index+2;
        
	       }
		}
		return temp;
		
}
}
